#
parameters:
  - name: buildEnvironment
    type: string
    default : PullRequest
    values: 
     - PullRequest 
     - Continuous 

jobs:
  - job: E2ETest
    displayName: E2E Test
    strategy:
      matrix:
        ${{ if eq(parameters.buildEnvironment, 'Continuous') }}:
          Arm:
            BuildPlatform: ARM
            NoDeployOption: --no-deploy # We don't have Arm agents
          Arm64:
            BuildPlatform: ARM64
            NoDeployOption: --no-deploy # We don't have Arm agents
          x64:
            BuildPlatform: x64
            NoDeployOption:
        # End Continuous only
        x86:
          BuildPlatform: x86
          NoDeployOption:

    variables:
      - template: ../variables/vs2019.yml

    pool:
      vmImage: $(VmImage)

    timeoutInMinutes: 60 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them

    steps:
      - checkout: self
        clean: true
        submodules: false
            
      - powershell: |
          Write-Host "##vso[task.setvariable variable=BuildLogDirectory]$(Build.BinariesDirectory)\$(BuildPlatform)\BuildLogs"
        displayName: Set BuildLogDirectory

      - template: ../templates/prepare-env.yml

      - task: CmdLine@2
        displayName: Set LocalDumps
        inputs:
          script: $(Build.SourcesDirectory)\.ado\scripts\SetupLocalDumps.cmd ReactUWPTestApp
          workingDirectory: $(Build.SourcesDirectory)

      - task: CmdLine@2
        displayName: Set up AppVerifer on ReactUWPTestApp
        inputs:
          script: regedit /S $(Build.SourcesDirectory)\.ado\scripts\ReactUWPTestApp.reg
          workingDirectory: $(Build.SourcesDirectory)
        condition: false # Must be manually enabled, since it causes a 5x perf reduction that causes test instability

      - task: CmdLine@2
        displayName: run-windows
        inputs:
          script: yarn windows --no-launch $(NoDeployOption) --no-packager --arch $(BuildPlatform) --release --logging --buildLogDirectory $(BuildLogDirectory) --msbuildprops BaseIntDir=$(BaseIntDir)
          workingDirectory: packages/E2ETest

      - task: CopyFiles@2
        displayName: Copy ReactUWPTestApp artifacts
        inputs:
          sourceFolder: $(Build.SourcesDirectory)/packages/E2ETest/windows/ReactUWPTestApp
          targetFolder: $(Build.StagingDirectory)/ReactUWPTestApp
          contents: AppPackages\**
        condition: succeededOrFailed()

      - task: PublishPipelineArtifact@1
        displayName: "Publish Artifact:ReactUWPTestApp"
        inputs:
          artifactName: ReactUWPTestApp-$(BuildPlatform)-$(System.JobAttempt)
          targetPath: $(Build.StagingDirectory)/ReactUWPTestApp
        condition: succeededOrFailed()

      - task: CmdLine@2
        displayName: run e2etest
        inputs:
          script: yarn run e2etest
          workingDirectory: packages/E2ETest

      - task: CopyFiles@2
        displayName: Copy test report
        inputs:
          sourceFolder: $(Build.SourcesDirectory)\packages\E2ETest\reports
          targetFolder: $(Build.StagingDirectory)/ReactUWPTestAppTreeDump/reports
        condition: succeededOrFailed()

      - task: CopyFiles@2
        displayName: Copy tree dump output files
        inputs:
          sourceFolder: $(UserProfile)\Documents\ReactUWPTestApp_cezq6h4ygq1hw!App
          targetFolder: $(Build.StagingDirectory)/ReactUWPTestAppTreeDump
          contents: TreeDump\**
        condition: succeededOrFailed()

      - task: CopyFiles@2
        displayName: Copy tree dump screenshots
        inputs:
          sourceFolder: $(Build.SourcesDirectory)\packages\E2ETest\errorShots
          targetFolder: $(Build.StagingDirectory)/ReactUWPTestAppTreeDump
        condition: succeededOrFailed()

      - task: PowerShell@2
        displayName: "MSInfo32"
        inputs:
          targetType: "inline"
          script: "Start-Process msinfo32 -ArgumentList '/report $(Build.StagingDirectory)\\ReactUWPTestAppTreeDump\\msinfo32.txt' -Wait"
        condition: failed()

      - task: PowerShell@2
        displayName: "Get-ShellScaling"
        inputs:
          targetType: "inline"
          script: ". $(Build.SourcesDirectory)\\.ado\\scripts\\Get-ShellScaling.ps1 > $(Build.StagingDirectory)\\ReactUWPTestAppTreeDump\\scaleFactor.txt"
        condition: failed()

      - task: PublishPipelineArtifact@1
        displayName: "Publish Artifact:ReactUWPTestAppTreeDump"
        inputs:
          artifactName: ReactUWPTestAppTreeDump-$(System.JobAttempt)
          targetPath: $(Build.StagingDirectory)/ReactUWPTestAppTreeDump
        condition: succeededOrFailed()

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "packages/E2ETest/reports/*.log"
        condition: succeededOrFailed()

      - task: PowerShell@2
        displayName: "Show winappdriver log"
        inputs:
          targetType: "inline"
          script: "Get-Content packages/E2ETest/reports/winappdriver.log | foreach {Write-Output $_}"
        condition: failed()

      - task: PowerShell@2
        displayName: List disksize at end of job
        inputs:
          targetType: inline # filePath | inline
          script: |
            Get-WmiObject Win32_LogicalDisk
        condition: succeededOrFailed()

      - template: ../templates/upload-build-logs.yml
        parameters:
          buildLogDirectory: '$(BuildLogDirectory)'
          condition: succeededOrFailed()
